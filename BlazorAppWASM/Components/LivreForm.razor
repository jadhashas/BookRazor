@using BlazorAppWASM.Models
@using System.ComponentModel.DataAnnotations
@inject IJSRuntime JSRuntime

<style>
    .form-container {
        max-width: 800px;
        margin: 2rem auto;
        padding: 2rem;
        background: #fff;
        border-radius: 12px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .form-header {
        text-align: center;
        margin-bottom: 2rem;
    }

    .form-header h2 {
        color: #2c3e50;
        font-weight: 600;
        margin-bottom: 0.5rem;
    }

    .form-header p {
        color: #7f8c8d;
    }

    .image-upload-container {
        text-align: center;
        padding: 2rem;
        border: 2px dashed #3498db;
        border-radius: 8px;
        background: #f8f9fa;
        transition: all 0.3s ease;
        margin-bottom: 2rem;
    }

    .image-upload-container:hover {
        border-color: #2980b9;
        background: #f1f8ff;
    }

    .book-cover-preview {
        max-width: 200px;
        max-height: 300px;
        object-fit: cover;
        border-radius: 4px;
        margin-bottom: 1rem;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .form-group {
        margin-bottom: 1.5rem;
    }

    .form-group label {
        display: block;
        margin-bottom: 0.5rem;
        color: #2c3e50;
        font-weight: 500;
    }

    .form-control {
        width: 100%;
        padding: 0.75rem;
        border: 1px solid #ddd;
        border-radius: 6px;
        transition: all 0.3s ease;
    }

    .form-control:focus {
        border-color: #3498db;
        box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.2);
        outline: none;
    }

    .form-check {
        display: flex;
        align-items: center;
        margin: 1.5rem 0;
    }

    .form-check-input {
        margin-right: 0.5rem;
    }

    .form-check-label {
        color: #2c3e50;
    }

    .btn {
        padding: 0.75rem 1.5rem;
        border-radius: 6px;
        font-weight: 500;
        transition: all 0.3s ease;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
    }

    .btn-primary {
        background: linear-gradient(135deg, #3498db, #2980b9);
        border: none;
        color: white;
    }

    .btn-primary:hover {
        background: linear-gradient(135deg, #2980b9, #1c6ea4);
        transform: translateY(-1px);
    }

    .btn-secondary {
        background: #f8f9fa;
        border: 1px solid #ddd;
        color: #2c3e50;
    }

    .btn-secondary:hover {
        background: #e9ecef;
        transform: translateY(-1px);
    }

    .alert {
        padding: 1rem;
        border-radius: 6px;
        margin-top: 1rem;
    }

    .alert-danger {
        background: #fee;
        border: 1px solid #fcc;
        color: #c00;
    }

    .validation-message {
        color: #e74c3c;
        font-size: 0.875rem;
        margin-top: 0.5rem;
    }
</style>

<div class="form-container">
    <div class="form-header">
        <h2>@(ExistingLivre == null ? "Ajouter un livre" : "Modifier le livre")</h2>
        <p>Remplissez les informations du livre ci-dessous</p>
    </div>

    <EditForm Model="@currentLivre" OnValidSubmit="OnFormSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <div class="image-upload-container">
                @if (!string.IsNullOrEmpty(imageUrl))
                {
                    <img src="@imageUrl" alt="Couverture du livre" class="book-cover-preview" />
                }
                <InputFile OnChange="HandleImageUpload" class="form-control" accept=".jpg,.jpeg,.png" />
                <p class="text-muted mt-2">Formats acceptés : JPG, JPEG, PNG (max 5MB)</p>
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger">
                        @errorMessage
                    </div>
                }
            </div>
        </div>

        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    <label for="titre">Titre</label>
                    <InputText id="titre" @bind-Value="currentLivre.Titre" class="form-control" placeholder="Entrez le titre du livre" />
                    <ValidationMessage For="@(() => currentLivre.Titre)" class="validation-message" />
                </div>

                <div class="form-group">
                    <label for="auteur">Auteur</label>
                    <InputText id="auteur" @bind-Value="currentLivre.Auteur" class="form-control" placeholder="Entrez le nom de l'auteur" />
                    <ValidationMessage For="@(() => currentLivre.Auteur)" class="validation-message" />
                </div>

                <div class="form-group">
                    <label for="isbn">ISBN</label>
                    <InputText id="isbn" @bind-Value="currentLivre.ISBN" class="form-control" placeholder="Entrez l'ISBN du livre" />
                    <ValidationMessage For="@(() => currentLivre.ISBN)" class="validation-message" />
                </div>
            </div>

            <div class="col-md-6">
                <div class="form-group">
                    <label for="type">Type</label>
                    <InputSelect id="type" @bind-Value="currentLivre.Type" class="form-control">
                        <option value="">Sélectionnez un type</option>
                        <option value="Roman">Roman</option>
                        <option value="Essai">Essai</option>
                        <option value="Biographie">Biographie</option>
                        <option value="Science-Fiction">Science-Fiction</option>
                        <option value="Policier">Policier</option>
                        <option value="Autre">Autre</option>
                    </InputSelect>
                    <ValidationMessage For="@(() => currentLivre.Type)" class="validation-message" />
                </div>

                <div class="form-group">
                    <label for="datePublication">Date de publication</label>
                    <InputDate id="datePublication" @bind-Value="currentLivre.DatePublication" class="form-control" />
                    <ValidationMessage For="@(() => currentLivre.DatePublication)" class="validation-message" />
                </div>

                <div class="form-group">
                    <label for="prix">Prix</label>
                    <InputNumber id="prix" @bind-Value="currentLivre.Prix" class="form-control" placeholder="0.00" />
                    <ValidationMessage For="@(() => currentLivre.Prix)" class="validation-message" />
                </div>
            </div>
        </div>

        <div class="form-group">
            <label for="description">Description</label>
            <InputTextArea id="description" @bind-Value="currentLivre.Description" class="form-control" rows="4" placeholder="Entrez la description du livre" />
            <ValidationMessage For="@(() => currentLivre.Description)" class="validation-message" />
        </div>

        <div class="form-check">
            <InputCheckbox id="disponible" @bind-Value="currentLivre.Disponible" class="form-check-input" />
            <label class="form-check-label" for="disponible">Disponible</label>
        </div>

        <div class="form-group mt-4">
            <button type="submit" class="btn btn-primary">
                <i class="fas fa-save"></i> Enregistrer
            </button>
            <button type="button" class="btn btn-secondary" @onclick="OnFormCancel">
                <i class="fas fa-times"></i> Annuler
            </button>
        </div>
    </EditForm>
</div>

@code {
    [Parameter]
    public Livre? ExistingLivre { get; set; }

    [Parameter]
    public EventCallback<SaveLivreEventArgs> OnLivreSave { get; set; }

    [Parameter]
    public EventCallback OnLivreCancel { get; set; }

    private Livre currentLivre = new();
    private string? imageUrl;
    private IBrowserFile? uploadedImage;
    private string? errorMessage;
    private const int MaxFileSize = 5 * 1024 * 1024; // 5MB
    private readonly string[] AllowedExtensions = new[] { ".jpg", ".jpeg", ".png" };

    public class SaveLivreEventArgs
    {
        public Livre Livre { get; set; } = default!;
        public IBrowserFile? Image { get; set; }
        public string? ImageUrl { get; set; }
    }

    protected override void OnParametersSet()
    {
        if (ExistingLivre != null)
        {
            currentLivre = new Livre
            {
                Id = ExistingLivre.Id,
                Titre = ExistingLivre.Titre,
                Auteur = ExistingLivre.Auteur,
                ISBN = ExistingLivre.ISBN,
                DatePublication = ExistingLivre.DatePublication,
                Prix = ExistingLivre.Prix,
                Description = ExistingLivre.Description,
                Type = ExistingLivre.Type,
                Disponible = ExistingLivre.Disponible,
                ImageUrl = ExistingLivre.ImageUrl
            };
            imageUrl = ExistingLivre.ImageUrl ?? $"/images/books/{ExistingLivre.Id}.jpg";
        }
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        try
        {
            errorMessage = null;
            var file = e.File;

            // Vérifier la taille du fichier
            if (file.Size > MaxFileSize)
            {
                errorMessage = "La taille du fichier ne doit pas dépasser 5 MB";
                return;
            }

            // Vérifier l'extension
            var extension = Path.GetExtension(file.Name).ToLowerInvariant();
            if (!AllowedExtensions.Contains(extension))
            {
                errorMessage = "Seuls les fichiers .jpg, .jpeg et .png sont acceptés";
                return;
            }

            uploadedImage = file;
            
            // Créer une URL temporaire pour la prévisualisation
            using var stream = file.OpenReadStream(MaxFileSize);
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            var imageBytes = ms.ToArray();
            var base64 = Convert.ToBase64String(imageBytes);
            imageUrl = $"data:{file.ContentType};base64,{base64}";
        }
        catch (Exception ex)
        {
            errorMessage = $"Erreur lors du chargement de l'image : {ex.Message}";
            uploadedImage = null;
            imageUrl = null;
        }
    }

    private async Task OnFormSubmit()
    {
        var args = new SaveLivreEventArgs
        {
            Livre = currentLivre,
            Image = uploadedImage,
            ImageUrl = imageUrl
        };
        await OnLivreSave.InvokeAsync(args);
    }

    private async Task OnFormCancel()
    {
        await OnLivreCancel.InvokeAsync();
    }
} 