@page "/livres/edit/{LivreId:int}"
@using Microsoft.AspNetCore.Components.Forms
@using BlazorAppWASM.Components
@using BlazorAppWASM.Models

<div class="page-header">
    <h1>Modifier le livre</h1>
</div>

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-body">
                    @if (currentLivre == null)
                    {
                        <div class="loading-container">
                            <div class="spinner-grow text-primary" role="status">
                                <span class="visually-hidden">Chargement...</span>
                            </div>
                            <p class="mt-3">Chargement du livre...</p>
                        </div>
                    }
                    else
                    {
                        <LivreForm ExistingLivre="currentLivre" OnLivreSave="SaveLivreAsync" OnLivreCancel="CancelEdit" />
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int LivreId { get; set; }

    [Inject]
    public NavigationManager Navigation { get; set; } = default!;

    [Inject]
    public BlazorAppWASM.Services.LivreService LivreManager { get; set; } = default!;

    private BlazorAppWASM.Models.Livre? currentLivre;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            currentLivre = await LivreManager.GetLivreByIdAsync(LivreId);
            if (currentLivre == null)
            {
                Navigation.NavigateTo("/livres");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors du chargement du livre : {ex.Message}");
            Navigation.NavigateTo("/livres");
        }
    }

    private async Task SaveLivreAsync(LivreForm.SaveLivreEventArgs args)
    {
        try
        {
            // S'assurer que l'ID est correctement défini
            args.Livre.Id = LivreId;
            
            // Mettre à jour le livre
            await LivreManager.UpdateLivreAsync(args.Livre);

            // Si une nouvelle image a été uploadée, la sauvegarder
            if (args.Image != null)
            {
                var path = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "images", "books", $"{LivreId}.jpg");
                Directory.CreateDirectory(Path.GetDirectoryName(path)!);

                await using var stream = args.Image.OpenReadStream();
                await using var fileStream = File.Create(path);
                await stream.CopyToAsync(fileStream);
            }

            Navigation.NavigateTo("/livres");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors de la mise à jour du livre : {ex.Message}");
        }
    }

    private void CancelEdit()
    {
        Navigation.NavigateTo("/livres");
    }
} 