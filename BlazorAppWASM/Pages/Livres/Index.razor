@page "/livres"
@using BlazorAppWASM.Models
@using BlazorAppWASM.Services
@inject LivreService LivreService
@inject NavigationManager NavigationManager

<div class="page-header">
    <h1>Votre Collection</h1>
    <button class="btn btn-primary" @onclick="@(() => NavigationManager.NavigateTo("/livres/add"))">
        <i class="fas fa-plus me-2"></i> Ajouter un livre
    </button>
</div>

@if (livres == null)
{
    <div class="loading-container">
        <div class="spinner-grow text-primary" role="status">
            <span class="visually-hidden">Chargement...</span>
        </div>
        <p class="mt-3">Chargement de votre collection...</p>
    </div>
}
else if (!livres.Any())
{
    <div class="empty-state">
        <i class="fas fa-books fa-4x"></i>
        <h3>Votre bibliothèque est vide</h3>
        <p>Commencez à construire votre collection dès maintenant</p>
        <button class="btn btn-primary" @onclick="@(() => NavigationManager.NavigateTo("/livres/add"))">
            <i class="fas fa-plus me-2"></i> Ajouter votre premier livre
        </button>
    </div>
}
else
{
    <div class="books-grid">
        @foreach (var livre in livres)
        {
            <div class="book-card">
                <img src="/images/book-cover-placeholder.jpg" alt="@livre.Titre" class="book-image" />
                <div class="book-status @(livre.Disponible ? "status-available" : "status-borrowed")">
                    @(livre.Disponible ? "Disponible" : "Emprunté")
                </div>
                <div class="book-content">
                    <div class="book-type">
                        <i class="fas fa-book"></i>
                        <span>@livre.Type</span>
                        <span>•</span>
                        <span>@livre.DatePublication.Year</span>
                    </div>
                    <h3 class="book-title">@livre.Titre</h3>
                    <div class="book-author">
                        <i class="fas fa-user"></i>
                        <span>@livre.Auteur</span>
                    </div>
                    <p class="book-description">@livre.Description</p>
                    <div class="book-actions">
                        <a href="/livres/details/@livre.Id" class="book-link">Voir plus</a>
                        <div>
                            <button class="btn btn-light btn-sm" @onclick="@(() => NavigationManager.NavigateTo($"/livres/edit/{livre.Id}"))">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button class="btn btn-danger btn-sm" @onclick="@(() => SupprimerLivre(livre.Id))">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private List<Livre> livres;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            livres = await LivreService.GetLivresAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors du chargement des livres : {ex.Message}");
        }
    }

    private async Task SupprimerLivre(int id)
    {
        try
        {
            await LivreService.DeleteLivreAsync(id);
            livres = await LivreService.GetLivresAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors de la suppression du livre : {ex.Message}");
        }
    }
} 