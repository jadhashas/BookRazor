@page "/livres"
@using BlazorAppWASM.Models
@using BlazorAppWASM.Services
@inject LivreService LivreService
@inject NavigationManager NavigationManager

<style>
    .page-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
        padding: 1rem;
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .page-header h1 {
        margin: 0;
        color: #2c3e50;
        font-weight: 600;
    }

    .btn-primary {
        background: linear-gradient(135deg, #3498db 0%, #2980b9 100%);
        border: none;
        padding: 0.75rem 1.5rem;
        border-radius: 8px;
        transition: transform 0.2s, box-shadow 0.2s;
    }

    .btn-primary:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
    }

    .books-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 2rem;
        padding: 1rem;
    }

    .book-card {
        background: white;
        border-radius: 12px;
        overflow: hidden;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        transition: transform 0.3s, box-shadow 0.3s;
        position: relative;
    }

    .book-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 15px rgba(0,0,0,0.2);
    }

    .book-image {
        width: 100%;
        height: 200px;
        object-fit: cover;
        border-bottom: 1px solid #eee;
    }

    .book-status {
        position: absolute;
        top: 1rem;
        right: 1rem;
        padding: 0.5rem 1rem;
        border-radius: 20px;
        font-size: 0.8rem;
        font-weight: 600;
        color: white;
    }

    .status-available {
        background: linear-gradient(135deg, #2ecc71 0%, #27ae60 100%);
    }

    .status-borrowed {
        background: linear-gradient(135deg, #e74c3c 0%, #c0392b 100%);
    }

    .book-content {
        padding: 1.5rem;
    }

    .book-type {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        color: #7f8c8d;
        font-size: 0.9rem;
        margin-bottom: 0.5rem;
    }

    .book-title {
        color: #2c3e50;
        font-size: 1.25rem;
        margin: 0.5rem 0;
        font-weight: 600;
    }

    .book-author {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        color: #34495e;
        margin-bottom: 1rem;
    }

    .book-description {
        color: #7f8c8d;
        font-size: 0.9rem;
        margin-bottom: 1.5rem;
        display: -webkit-box;
        -webkit-line-clamp: 3;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

    .book-actions {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .book-link {
        color: #3498db;
        text-decoration: none;
        font-weight: 500;
        transition: color 0.2s;
    }

    .book-link:hover {
        color: #2980b9;
    }

    .btn-light, .btn-danger {
        padding: 0.5rem;
        border-radius: 6px;
        transition: transform 0.2s;
    }

    .btn-light:hover, .btn-danger:hover {
        transform: scale(1.1);
    }

    .loading-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        min-height: 300px;
    }

    .empty-state {
        text-align: center;
        padding: 3rem;
        color: #7f8c8d;
    }

    .empty-state i {
        color: #bdc3c7;
        margin-bottom: 1rem;
    }
</style>

<div class="page-header">
    <h1>Votre Collection</h1>
    <button class="btn btn-primary" @onclick="@(() => NavigationManager.NavigateTo("/livres/add"))">
        <i class="fas fa-plus me-2"></i> Ajouter un livre
    </button>
</div>

@if (livres == null)
{
    <div class="loading-container">
        <div class="spinner-grow text-primary" role="status">
            <span class="visually-hidden">Chargement...</span>
        </div>
        <p class="mt-3">Chargement de votre collection...</p>
    </div>
}
else if (!livres.Any())
{
    <div class="empty-state">
        <i class="fas fa-books fa-4x"></i>
        <h3>Votre bibliothèque est vide</h3>
        <p>Commencez à construire votre collection dès maintenant</p>
        <button class="btn btn-primary" @onclick="@(() => NavigationManager.NavigateTo("/livres/add"))">
            <i class="fas fa-plus me-2"></i> Ajouter votre premier livre
        </button>
    </div>
}
else
{
    <div class="books-grid">
        @foreach (var livre in livres)
        {
            <div class="book-card">
                <img src="/images/book-cover-placeholder.jpg" alt="@livre.Titre" class="book-image" />
                <div class="book-status @(livre.Disponible ? "status-available" : "status-borrowed")">
                    @(livre.Disponible ? "Disponible" : "Emprunté")
                </div>
                <div class="book-content">
                    <div class="book-type">
                        <i class="fas fa-book"></i>
                        <span>@livre.Type</span>
                        <span>•</span>
                        <span>@livre.DatePublication.Year</span>
                    </div>
                    <h3 class="book-title">@livre.Titre</h3>
                    <div class="book-author">
                        <i class="fas fa-user"></i>
                        <span>@livre.Auteur</span>
                    </div>
                    <p class="book-description">@livre.Description</p>
                    <div class="book-actions">
                        <a href="/livres/details/@livre.Id" class="book-link">Voir plus</a>
                        <div>
                            <button class="btn btn-light btn-sm" @onclick="@(() => NavigationManager.NavigateTo($"/livres/edit/{livre.Id}"))">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button class="btn btn-danger btn-sm" @onclick="@(() => SupprimerLivre(livre.Id))">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private List<Livre> livres;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            livres = await LivreService.GetLivresAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors du chargement des livres : {ex.Message}");
        }
    }

    private async Task SupprimerLivre(int id)
    {
        try
        {
            await LivreService.DeleteLivreAsync(id);
            livres = await LivreService.GetLivresAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors de la suppression du livre : {ex.Message}");
        }
    }
} 