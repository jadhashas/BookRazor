@page "/livres/edit/{LivreId:int}"
@inherits EditBase

<div class="page-header">
    <h1>Modifier le livre</h1>
</div>

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(_errorMessage))
                    {
                        <div class="alert alert-danger mt-3" role="alert">
                            @_errorMessage
                        </div>
                    }
                    @if (_isLoading)
                    {
                        <div class="loading-container">
                            <div class="spinner-grow text-primary" role="status">
                                <span class="visually-hidden">Chargement...</span>
                            </div>
                            <p class="mt-3">Chargement du livre...</p>
                        </div>
                    }
                    else if (CurrentLivre == null)
                    {
                        <div class="alert alert-warning" role="alert">
                            Livre non trouvé
                        </div>
                    }
                    else
                    {
                        <LivreForm ExistingLivre="CurrentLivre" OnLivreSave="SaveLivreAsync" OnLivreCancel="CancelEdit" />
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@* @code { *@
@*     [Parameter] *@
@*     public int LivreId { get; set; } *@

@*     private Livre? CurrentLivre; *@
@*     private bool _isLoading = true; *@
@*     private string? _errorMessage; *@

@*     [Inject] *@
@*     public ILivreService LivreService { get; set; } *@

@*     [Inject] *@
@*     public NavigationManager NavigationManager { get; set; } *@

@*     protected override async Task OnInitializedAsync() *@
@*     { *@
@*         try *@
@*         { *@
@*             CurrentLivre = await LivreService.GetByIdAsync(LivreId); *@
@*         } *@
@*         catch (Exception ex) *@
@*         { *@
@*             _errorMessage = $"Erreur lors du chargement du livre : {ex.Message}"; *@
@*         } *@
@*         finally *@
@*         { *@
@*             _isLoading = false; *@
@*         } *@
@*     } *@

@*     private async Task SaveLivreAsync(Livre livreModifie) *@
@*     { *@
@*         try *@
@*         { *@
@*             // Générer une nouvelle URL d'image aléatoire si demandé *@
@*             if (livreModifie.ImageUrl == null) *@
@*             { *@
@*                 livreModifie.ImageUrl = $"https://picsum.photos/200/300?random={Random.Shared.Next(1, 1000)}"; *@
@*             } *@
            
@*             await LivreService.UpdateAsync(livreModifie); *@
@*             NavigationManager.NavigateTo("/livres"); *@
@*         } *@
@*         catch (Exception ex) *@
@*         { *@
@*             _errorMessage = $"Erreur lors de la modification du livre : {ex.Message}"; *@
@*         } *@
@*     } *@

@*     private void CancelEdit() *@
@*     { *@
@*         NavigationManager.NavigateTo("/livres"); *@
@*     } *@
@* } *@